<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.bookmarkboard.mapper.BookmarkMapper">
    <select id="getOneById" resultType="com.project.bookmarkboard.dto.BookmarkDTO">
        SELECT * FROM bookmark WHERE id = #{id}
    </select>

    <select id="getCountByOwnerAndIsStared" resultType="int">
        SELECT count(*) FROM bookmark WHERE owner = #{owner} AND is_stared = #{isStared}
    </select>

    <select id="getCountByOwner" resultType="int">
        SELECT count(*) FROM bookmark WHERE owner = #{owner}
    </select>

    <select id="getCountByOwnerAndIsShared" resultType="int">
        SELECT count(*) FROM bookmark WHERE owner = #{owner} AND is_shared = #{isShared}
    </select>

    <select id="getAllByOwnerOrderByIdAndStaredDesc" resultType="com.project.bookmarkboard.dto.BookmarkDTO">
        SELECT * FROM bookmark
        WHERE owner = #{owner}
        ORDER BY is_stared DESC, id DESC
    </select>

    <select id="getAllByIdListOrderByIsStaredDescAndIdDesc" resultType="com.project.bookmarkboard.dto.BookmarkDTO">
        SELECT * FROM bookmark
        WHERE id in
        <foreach item="item" index="index" collection="idList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getAllByIdListOrderByIsStaredDescAndIdDescLimitByFromAndTo" resultType="com.project.bookmarkboard.dto.BookmarkDTO">
        SELECT * FROM bookmark
        WHERE id in
        <foreach item="item" index="index" collection="idList" open="(" separator="," close=")">
            #{item}
        </foreach>
        LIMIT #{from}, #{to}
    </select>

    <select id="getAllByOwnerAndIsStaredOrderByIdDescLimitByFromAndTo" resultType="com.project.bookmarkboard.dto.BookmarkDTO">
        SELECT * FROM bookmark
        WHERE owner = #{owner} AND is_stared = #{isStared}
        ORDER BY id DESC
        LIMIT #{from}, #{to}
    </select>

    <select id="getAllByOwnerOrderByIdDescLimitByFromAndTo" resultType="com.project.bookmarkboard.dto.BookmarkDTO">
        SELECT * FROM bookmark
        WHERE owner = #{owner}
        ORDER BY id DESC
        LIMIT #{from}, #{to}
    </select>

    <select id="getAllByOwnerAndKeywordOrderByIsStaredDescAndIdDesc" resultType="com.project.bookmarkboard.dto.BookmarkDTO">
        SELECT * FROM bookmark
        WHERE owner = #{owner} AND (title LIKE CONCAT('%',#{keyword},'%') OR url LIKE CONCAT('%',#{keyword},'%') OR memo LIKE CONCAT('%',#{keyword},'%'))
        ORDER BY is_stared DESC, id DESC
    </select>

    <insert id="insertBookmark" parameterType="com.project.bookmarkboard.dto.BookmarkDTO">
        INSERT INTO bookmark(`owner`, `title`, `memo`, `url`, `is_shared`, `is_stared`)
        VALUES(#{owner}, #{title}, #{memo}, #{url}, #{isShared}, #{isStared})
    </insert>

    <delete id="deleteBookmarkById">
        DELETE FROM bookmark WHERE id = #{id};
    </delete>

    <update id="updateIsStaredById">
        UPDATE bookmark
        SET is_stared = #{isStared}
        WHERE id = #{id}
    </update>

    <update id="updateIsSharedById">
        UPDATE bookmark
        SET is_shared = #{isShared}
        WHERE id = #{id}
    </update>

    <update id="updateBookmarkById" parameterType="com.project.bookmarkboard.dto.BookmarkDTO">
        UPDATE bookmark
        SET title = #{title}, memo = #{memo}, url = #{url}, is_stared = #{isStared}, is_shared = #{isShared}
        WHERE id = #{id}
    </update>
</mapper>